#!/bin/env/python3
"""
siesta_engine.py
ASE+Siesta+ML

Handles the primary functions
"""
import dask
import dask.distributed
from dask.distributed  import Client, LocalCluster
from siesta_engine.calculator import CustomSiesta
import sys
import argparse
import os
from ase.io import read, write
import json
import itertools
from ase import Atoms
import numpy as np

def in_private_dir(method):

    def wrapper_private_dir(dir, *args, **kwargs):
        try:
            os.chdir(dir)
        except FileNotFoundError:
            os.mkdir(dir)
            os.chdir(dir)
        return method(*args, **kwargs)
    return wrapper_private_dir

@in_private_dir
def calculate_system(atoms, fdf_path, kwargs):
    calc = CustomSiesta(**kwargs,
               fdf_path = fdf_path)
    atoms.calc = calc
    atoms.get_potential_energy()
    return atoms

def calculate_distributed(atoms, fdf_path, workdir, kwargs, n_workers = -1):

    kwargs['label']= kwargs.get('label','siesta')
    kwargs['xc']= kwargs.get('xc','PW92')
    kwargs['basis_set']= kwargs.get('basis_set','SZ')
    kwargs['fdf_arguments']= kwargs.get('fdf_arguments',{'MaxSCFIterations': 200})
    kwargs['pseudo_qualifier'] = kwargs.get('pseudo_qualifier','')

    print('Calculating {} systems on'.format(len(atoms)))
    cluster = LocalCluster(n_workers = n_workers, threads_per_worker = 1)
    print(cluster)
    client = Client(cluster)


    futures = client.map(calculate_system,
        [os.path.join(workdir,str(i)) for i,_ in enumerate(atoms)],
        atoms, [fdf_path]*len(atoms), [kwargs]*len(atoms))
    return [f.result() for f in futures]


def default_driver(atoms, fdf_path, dir, args):
    results = calculate_distributed(atoms, fdf_path, dir, args.kwargs, args.nworkers)
    return results

def mbe_driver(atoms, fdf_path, dir, args):


    results = default_driver(atoms, fdf_path, dir, args)
    species = [a.get_chemical_symbols() for a in atoms]
    n_mol = int(len(species[0])/3)
    for s in species:
        n_mol_new = int(len(s)/3)
        if not n_mol == n_mol_new:
            raise Exception('Every snapshot in trajectory must contain same number of molecules')
        if not s == ['O','H','H'] * int(len(s)/3):
            print(s)
            raise Exception('Trajectory file must contain atoms in the oder OHHOHH...')

    if args.workdir:
        mbe_root = dir[:-len(args.workdir)]
    else:
        mbe_root = dir

    lower_results = []
    for n in range(1, n_mol):
        print(list(itertools.combinations(range(n_mol),n)))
        new_atoms = [Atoms('OHH'*n,positions=a.get_positions().reshape(-1,3,3)[np.array(comb)].reshape(-1,3),pbc= a.get_pbc(),
                        cell = a.get_cell()) for a in atoms for comb in itertools.combinations(range(n_mol),n)]
        try:
            os.mkdir(mbe_root + '/mbe_{}'.format(n))
        except FileExistsError:
            pass
        lower_results.append(default_driver(new_atoms, fdf_path, mbe_root +'/mbe_{}'.format(n), args))

    etot = np.array([a.get_potential_energy() for a in results])
    print(etot)
    for i, lr in enumerate(lower_results[::-1]):
        write(mbe_root + '/mbe_{}/results.traj'.format(n_mol-(i+1)), lr)
        epart = np.array([((-1)**(i+1)) * a.get_potential_energy() for a in lr]).reshape(len(etot),-1)
        epart = np.sum(epart, axis = -1)
        etot += epart

    for i, e in enumerate(etot):
        results[i].calc.results['energy'] = e
        results[i].calc.results['forces'] = None

    return results

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='')
    parser.add_argument('xyz', action='store', help ='Path to .xyz/.traj file containing list of configurations')
    parser.add_argument('-fdf', metavar='fdf', type=str, nargs = '?', default='')
    parser.add_argument('-workdir', metavar='workdir', type=str, nargs = '?', default='.')
    parser.add_argument('-pseudoloc', metavar='pseudoloc', type=str, nargs = '?', default='.')
    parser.add_argument('-kwargs', metavar='kwargs', type=json.loads, nargs = '?', default='{}')
    parser.add_argument('-nworkers', metavar='nworkers', type=int, nargs = '?', default=-1)
    parser.add_argument('-siesta_mpi', metavar='siesta_mpi', type=int, nargs = '?', default=1)
    parser.add_argument('-mbe', action='store_true', help='Do manybody expansion of enery')
    parser.add_argument('--nxc', metavar='nxc', help='Use nxc potential', type=str, default = '', nargs='?')

    args = parser.parse_args()

    if not args.nxc is '':
        if args.fdf is '':
            raise Exception('Must provide fdf file to use NXC')
        open(args.fdf, 'a').write('\nNeuralXC {}\n'.format(args.nxc))

    print('Passed kwargs: {}'.format(args.kwargs))
    dir = os.path.abspath(args.workdir)
    if args.fdf:
        fdf_path = os.path.abspath(args.fdf)
    else:
        fdf_path = None
    pseudo_path = os.path.abspath(args.pseudoloc)
    os.environ['SIESTA_PP_PATH'] = pseudo_path
    if args.siesta_mpi > 1:
        os.environ['SIESTA_COMMAND'] = 'mpirun -np {} siesta < ./%s > ./%s'.format(args.siesta_mpi)
    else:
        os.environ['SIESTA_COMMAND'] = 'siesta < ./%s > ./%s'
    atoms = read(args.xyz, ':')

    if args.mbe:
        results = mbe_driver(atoms, fdf_path, dir, args)
    else:
        results = default_driver(atoms, fdf_path, dir, args)

    results_ext = args.xyz.split('.')[-1]
    results_path = os.path.join(dir, 'results.traj')
    write(results_path, results)
